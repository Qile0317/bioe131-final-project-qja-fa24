name: Deploy Next.js site to Pages

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    # container: staphb/samtools
    defaults:
      run:
        shell: bash -l {0}
    steps:

      - name: Checkout
        uses: actions/checkout@v4

      # - name: Set up conda
      #   uses: conda-incubator/setup-miniconda@v3
      #   with:
      #     miniconda-version: "latest"
      #     channels: conda-forge, bioconda, defaults
      #     use-only-tar-bz2: true  # IMPORTANT: This needs to be set for caching to work properly!
      #     auto-update-conda: true
      #     auto-activate-base: true

      - name: Download db installer dependencies
        run: |
          npm install -g @jbrowse/cli

          sudo apt-get install gcc
          sudo apt-get install make
          sudo apt-get install libbz2-dev
          sudo apt-get install zlib1g-dev
          sudo apt-get install libncurses5-dev 
          sudo apt-get install libncursesw5-dev
          sudo apt-get install liblzma-dev

          cd /usr/bin
          wget https://github.com/samtools/htslib/releases/download/1.21/htslib-1.21.tar.bz2
          tar -vxjf htslib-1.21.tar.bz2
          cd htslib-1.21
          make

          cd ..
          wget https://github.com/samtools/samtools/releases/download/1.21/samtools-1.21.tar.bz2
          tar -vxjf samtools-1.21.tar.bz2
          cd samtools-1.21
          make

          mkdir ~/myBinaries/
          cd ~/myBinaries/
          find /usr/bin/samtools-1.21/ -type f -executable | xargs -I v_b ln -s v_b ./
          find /usr/bin/htslib-1.21/ -type f -executable | xargs -I v_b ln -s v_b ./
          cd -
          echo 'export PATH=$PATH:~/myBinaries' >>~/.profile
          source ~/.profile

        # conda install -c conda-forge ncurses
        # conda install --solver=classic conda-forge::conda-libmamba-solver conda-forge::libmamba conda-forge::libmambapy conda-forge::libarchive conda-forge::zlib
        # conda install -c bioconda htslib samtools tabix

      - name: Download static Db
        run: |
          bash installation_scripts/fetch_data.sh
      
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/website/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
          elif [ -f "${{ github.workspace }}/website/package-lock.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
          else
            echo "Unable to determine package manager"
            exit 1
          fi

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
          cache-dependency-path: website/package-lock.json

      - name: Setup Pages
        uses: actions/configure-pages@v5
        with:
          static_site_generator: next

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            website/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('website/package-lock.json', 'website/yarn.lock') }}-${{ hashFiles('website/**/*.[jt]s', 'website/**/*.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('website/package-lock.json', 'website/yarn.lock') }}-

      - name: Install dependencies
        run: |
          cd website
          ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}

      - name: Build with Next.js
        run: |
          cd website
          ${{ steps.detect-package-manager.outputs.runner }} next build

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./website/out

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
